trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  DOCKER_BUILDKIT: 1

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    steps:
    - task: Cache@2
      displayName: 'Cache Maven packages'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
        path: $(MAVEN_CACHE_FOLDER)
    
    - task: Maven@3
      displayName: 'Build and Test with Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '$(MAVEN_OPTS)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.21'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'clean package'
    
    - task: CopyFiles@2
      displayName: 'Copy JAR to staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/target'
        Contents: '*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

    - task: Docker@2
      displayName: 'Build Docker Image'
      inputs:
        containerRegistry: 'dockerRegistryServiceConnection'
        repository: '$(dockerRepository)'
        command: 'build'
        Dockerfile: '**/Dockerfile'
        tags: |
          $(Build.BuildId)
          latest

# Commenté la partie push de l'image Docker car elle nécessite une connexion Docker Registry configurée
#    - task: Docker@2
#      displayName: 'Push Docker Image'
#      inputs:
#        containerRegistry: 'dockerRegistryServiceConnection'
#        repository: '$(dockerRepository)'
#        command: 'push'
#        tags: |
#          $(Build.BuildId)
#          latest

# La partie déploiement est commentée jusqu'à ce que la connexion Azure soit configurée
# - stage: Deploy
#   displayName: 'Deploy to Production'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - deployment: DeployToProduction
#     displayName: 'Deploy to Production'
#     environment: 'production'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: DownloadBuildArtifacts@1
#             inputs:
#               buildType: 'current'
#               downloadType: 'single'
#               artifactName: 'drop'
#               downloadPath: '$(System.ArtifactsDirectory)'
#           
#           - task: AzureWebApp@1
#             displayName: 'Deploy to Azure Web App'
#             inputs:
#               azureSubscription: 'azureSubscriptionServiceConnection'
#               appType: 'webAppContainer'
#               appName: '$(webAppName)'
#               deployToSlotOrASE: true
#               resourceGroupName: '$(resourceGroupName)'
#               slotName: 'production'
#               containers: '$(dockerRegistry)/$(dockerRepository):$(Build.BuildId)'
