# Pipeline CI/CD simplifié pour Mini-CI/CD

trigger:
  - main

pool:
  vmImage: 'ubuntu-latest'

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

stages:
- stage: Build
  displayName: 'Build and Test'
  jobs:
  - job: BuildAndTest
    displayName: 'Build and Test'
    steps:
    - task: Cache@2
      displayName: 'Cache Maven packages'
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
        path: $(MAVEN_CACHE_FOLDER)
    
    - task: Maven@3
      displayName: 'Build and Test with Maven'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '$(MAVEN_OPTS)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.21'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'clean package'
    
    - task: CopyFiles@2
      displayName: 'Copy JAR to staging directory'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/target'
        Contents: '*.jar'
        TargetFolder: '$(Build.ArtifactStagingDirectory)'
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'

# Étape de déploiement simplifiée - à activer lorsque vous serez prêt
# - stage: Deploy
#   displayName: 'Deploy'
#   dependsOn: Build
#   condition: succeeded()
#   jobs:
#   - job: Deploy
#     displayName: 'Deploy Application'
#     steps:
#     - task: DownloadBuildArtifacts@1
#       inputs:
#         buildType: 'current'
#         downloadType: 'single'
#         artifactName: 'drop'
#         downloadPath: '$(System.ArtifactsDirectory)'
#     
#     # Ajoutez ici les étapes de déploiement spécifiques à votre environnement
#     # Par exemple, déploiement vers un serveur via SSH, Azure App Service, etc.
